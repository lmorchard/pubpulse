# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.11.7

FROM python:${PYTHON_VERSION}-slim as base
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=development

ARG PORT
ENV PORT=${PORT:-8675}

WORKDIR /app

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Switch to the non-privileged user to run the application.
USER appuser

# Expose the port that the application listens on.
EXPOSE ${PORT}

# --------------------------------------------------------------

FROM base as appserver_dev
ENV FLASK_ENV=development
CMD python3 -m flask run --debug --host=0.0.0.0 --port=${PORT}

# --------------------------------------------------------------

FROM base as appserver_prod
ENV FLASK_ENV=production
COPY . .
CMD python3 -m flask run --host=0.0.0.0 --port=${PORT}

# --------------------------------------------------------------

FROM base as bot_dev
CMD watchmedo auto-restart \
    --directory='.' \
    --recursive \
    --patterns='*.py' \
    --ignore-directories \
    --ignore-patterns='db/*;log/*' \
    python3 bot.py

# --------------------------------------------------------------

FROM base as bot_prod
COPY . .
CMD python3 bot.py
